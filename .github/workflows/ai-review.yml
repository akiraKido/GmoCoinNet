name: AI Review Check

on:
  pull_request:
    types: [opened, synchronize]
    branches:
      - master
      - develop

jobs:
  ai-review:
    runs-on: ubuntu-latest
    environment: Default
    permissions:
      contents: read
      pull-requests: write
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Get changed files
        id: changed-files
        run: |
          echo "files=$(git diff --name-only origin/${{ github.base_ref }} ${{ github.sha }} | tr '\n' ' ')" >> $GITHUB_OUTPUT

      - name: Check and Generate PR Description
        id: pr-description
        run: |
          if [ -z "${{ github.event.pull_request.body }}" ]; then
            echo "PR description is empty. Generating from diff..."
            
            # Get the diff and format it into a description
            DIFF_SUMMARY=$(git diff --stat origin/${{ github.base_ref }} ${{ github.sha }})
            DETAILED_CHANGES=$(git diff --unified=0 origin/${{ github.base_ref }} ${{ github.sha }} | grep '^[+-]' | grep -v '^[+-]\{3\}')
            
            # Create a structured description
            DESCRIPTION=$(cat <<EOF
            ## Automated PR Description
            
            ### Files Changed
            \`\`\`
            ${DIFF_SUMMARY}
            \`\`\`
            
            ### Detailed Changes
            \`\`\`diff
            ${DETAILED_CHANGES}
            \`\`\`
            
            > Note: This description was automatically generated. Please update it with more context if needed.
            EOF
            )
            
            # Update PR description using GitHub API
            curl -X PATCH \
              -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
              -H "Accept: application/vnd.github.v3+json" \
              https://api.github.com/repos/${{ github.repository }}/pulls/${{ github.event.pull_request.number }} \
              -d "{\"body\": $(echo "$DESCRIPTION" | jq -R -s .)}"
            
            echo "description<<EOF" >> $GITHUB_OUTPUT
            echo "$DESCRIPTION" >> $GITHUB_OUTPUT
            echo "EOF" >> $GITHUB_OUTPUT
          else
            echo "description<<EOF" >> $GITHUB_OUTPUT
            echo "${{ github.event.pull_request.body }}" >> $GITHUB_OUTPUT
            echo "EOF" >> $GITHUB_OUTPUT
          fi

      - name: Read CONTRIBUTING.md
        id: rules
        run: |
          echo "rules<<EOF" >> $GITHUB_OUTPUT
          cat CONTRIBUTING.md >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: AI Review
        id: ai-review
        run: |
          # Prepare the JSON payload with proper escaping
          PROMPT=$(cat <<EOF
          You are a code reviewer checking if a PR follows the project guidelines.

          Contributing Rules:
          ${{ steps.rules.outputs.rules }}

          PR Description:
          ${{ steps.pr-description.outputs.description }}
          
          Changed Files: ${{ steps.changed-files.outputs.files }}

          Please review and check:
          1. Does the PR description include all required elements?
          2. For code changes, do they follow our code style rules?
          3. Has the version been updated in GmoCoinNet.csproj?

          Provide your review with clear pass/fail indicators for each requirement.
          EOF
          )
          
          # Escape the prompt for JSON
          ESCAPED_PROMPT=$(echo "$PROMPT" | jq -Rs .)
          
          RESPONSE=$(curl -X POST https://api.anthropic.com/v1/messages \
            -H "x-api-key: ${{ secrets.CLAUDE_API_KEY }}" \
            -H "anthropic-version: 2023-06-01" \
            -H "content-type: application/json" \
            -d "{
              \"model\": \"claude-3-5-sonnet-latest\",
              \"max_tokens\": 4096,
              \"messages\": [{
                \"role\": \"user\",
                \"content\": ${ESCAPED_PROMPT}
              }]
            }")
          
          # Print the full response for debugging
          echo "Full API Response:"
          echo "$RESPONSE"
          
          # Check if response contains an error
          ERROR_TYPE=$(echo "$RESPONSE" | jq -r '.error.type // empty')
          if [ ! -z "$ERROR_TYPE" ]; then
            echo "error=$ERROR_TYPE" >> $GITHUB_OUTPUT
            echo "Error occurred: $ERROR_TYPE"
            exit 0  # Exit successfully to prevent workflow failure, but with error flag set
          fi
          
          # Extract and set the review content
          REVIEW=$(echo "$RESPONSE" | jq -r '.content[0].text' | sed 's/"/\\"/g')
          echo "review<<EOF" >> $GITHUB_OUTPUT
          echo "$REVIEW" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Comment PR
        if: steps.ai-review.outputs.error == ''
        uses: actions/github-script@v6
        with:
          script: |
            const review = `
            ## AI Review Results
            
            ${process.env.AI_REVIEW_RESULT}
            
            Note: This is an automated review. Please address any issues found.
            `;
            
            github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: review
            });
        env:
          AI_REVIEW_RESULT: ${{ steps.ai-review.outputs.review }} 